@{
    ViewData["Title"] = "Application Insights";
}

<h2 class="mt-2">@ViewData["Title"]</h2>

<link rel="stylesheet" href="~/lib/nvd3/nv.d3.min.css" type="text/css" />
<script type="text/javascript" src="~/lib/d3/d3.min.js"></script>
<script type="text/javascript" src="~/lib/nvd3/nv.d3.min.js"></script>

<style>
    #insight-container .card { margin-top: 15px; margin-bottom: 15px; }
    #insight-container .card-body { padding: 0.8rem; }
    #insight-container svg { height: 265px; }
    .nvd3 .nv-axis.nv-y path.domain { stroke-opacity: 0; }
    .nv-series-0, .nv-series-1, .nv-series-2 { stroke-width: 2!important; }
</style>

<div class="row" id="insight-container">
    <div class="col-12 col-md-6 col-xl-4 b1">
        <div class="card">
            <div class="card-header">
                Average availability <i class="fas fa-sync-alt fa-spin"></i>
            </div>
            <div class="card-body">
                <svg></svg>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-6 col-xl-4 b2">
        <div class="card">
            <div class="card-header">
                Server response time <i class="fas fa-sync-alt fa-spin"></i>
            </div>
            <div class="card-body">
                <svg></svg>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-6 col-xl-4 b3">
        <div class="card">
            <div class="card-header">
                Requests (failed / all) <i class="fas fa-sync-alt fa-spin"></i>
            </div>
            <div class="card-body">
                <svg></svg>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-6 col-xl-4 b4">
        <div class="card">
            <div class="card-header">
                Exceptions and Dependency failures <i class="fas fa-sync-alt fa-spin"></i>
            </div>
            <div class="card-body">
                <svg></svg>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-6 col-xl-4 b5">
        <div class="card">
            <div class="card-header">
                Process CPU utilization <i class="fas fa-sync-alt fa-spin"></i>
            </div>
            <div class="card-body">
                <svg></svg>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-6 col-xl-4 b6">
        <div class="card">
            <div class="card-header">
                Unique sessions and users <i class="fas fa-sync-alt fa-spin"></i>
            </div>
            <div class="card-body">
                <svg></svg>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    function onFinished(result_data) {
        window.applicationInsightsData = result_data;

        var data = [
            { values: [], max: 0, metric: 'availabilityResults/availabilityPercentage', agg: 'avg', key: 'Availability', color: '#54a300' },
            { values: [], max: 0, metric: 'requests/duration', agg: 'avg', key: 'Request duration', color: '#0078d4' },
            { values: [], max: 0, metric: 'requests/failed', agg: 'sum', key: 'Failed requests', color: '#ec008c', area: true },
            { values: [], max: 0, metric: 'requests/count', agg: 'sum', key: 'All Requests', color: '#47bdf5', area: true },
            { values: [], max: 0, metric: 'exceptions/server', agg: 'sum', key: 'Server exceptions', color: '#ec008c' },
            { values: [], max: 0, metric: 'dependencies/failed', agg: 'sum', key: 'Dependency failures', color: '#68217a' },
            { values: [], max: 0, metric: 'performanceCounters/processCpuPercentage', agg: 'min', key: 'Minimum', color: '#54a300' },
            { values: [], max: 0, metric: 'performanceCounters/processCpuPercentage', agg: 'avg', key: 'Average', color: '#00a2ad' },
            { values: [], max: 0, metric: 'performanceCounters/processCpuPercentage', agg: 'max', key: 'Maximum', color: '#ef6950' },
            { values: [], max: 0, metric: 'sessions/count', agg: 'unique', key: 'Unique sessions', color: '#b10069' },
            { values: [], max: 0, metric: 'users/count', agg: 'unique', key: 'Unique users', color: '#4668c5' }
        ];

        for (var i = 0; i < result_data.segments.length; i++) {
            let seg = result_data.segments[i];
            let xVal = seg.tick;
            for (var j = 0; j < data.length; j++) {
                let item = seg[data[j].metric];
                if (item == null) {
                    data[j].values.push({ x: xVal, y: NaN });
                } else {
                    data[j].values.push({ x: xVal, y: item[data[j].agg] });
                    data[j].max = Math.max(data[j].max, item[data[j].agg]);
                }
            }
        }

        drawCommon('.b1', [data[0]], result_data.ticks, function (chart) {
            chart.yDomain([-0.5, 100.5]);
            chart.yAxis.tickValues([0, 20, 40, 60, 80, 100]).tickFormat(function (a) { return a + '%' });
        });

        drawCommon('.b2', [data[1]], result_data.ticks, function (chart) {
            chart.yDomain([-0.001, data[1].max * 1.05]);
            chart.yAxis.tickFormat(function (a) { return a + 'ms' });
        });

        drawCommon('.b3', [data[2], data[3]], result_data.ticks, function (chart) {
            chart.yDomain([-1, data[3].max * 1.05]);
        });

        drawCommon('.b4', [data[4], data[5]], result_data.ticks, function (chart) {
            chart.yDomain([-0.05, Math.max(data[4].max, data[5].max) * 1.05]);
        });

        drawCommon('.b5', [data[6], data[7], data[8]], result_data.ticks, function (chart) {
            chart.yDomain([-0.001, data[8].max * 1.05]);
            chart.yAxis.tickFormat(function (a) { return a + '%' });
        });

        drawCommon('.b6', [data[9], data[10]], result_data.ticks, function (chart) {
            chart.yDomain([-0.2, Math.max(data[9].max, data[10].max) * 1.05]);
        });
    }

    function timeXFormat(d) {
        return d3.time.format('%m/%d %H:%M')(new Date(d));
    }

    function drawCommon(ele, data, commonTicks, more_configure) {
        $(ele + ' .fa-sync-alt').hide();
        nv.addGraph(function () {
            var chart = nv.models.lineChart()
                .margin({ left: 40, top: 12, right: 10, bottom: 30 })
                .useInteractiveGuideline(true)
                .showLegend(true)
                .showYAxis(true)
                .showXAxis(true);

            chart.xAxis.tickValues(commonTicks).tickFormat(timeXFormat).showMaxMin(false);
            chart.yAxis.showMaxMin(false);

            if (more_configure) { more_configure(chart); }
            d3.select(ele + ' svg').datum(data).call(chart);
            nv.utils.windowResize(function () { chart.update() });
            return chart;
        });
    }

    $(function () {
        $.ajax({
            type: "GET",
            url: "@Url.Action("CustomMetric1")",
            dataType: "json",
            complete: function (jqXHR) {
                if (jqXHR.getResponseHeader('X-Login-Page')) {
                    window.location = jqXHR.getResponseHeader('X-Login-Page');
                }
                if (jqXHR.status == 200) {
                    onFinished(JSON.parse(jqXHR.responseText));
                }
            },
            error: function (jqXHR) {
                notice("请联系管理员。" + jqXHR.status + ' ' + jqXHR.statusText + "<br><pre>" + jqXHR.responseText, "danger", "内部错误", false);
                $('.fa-sync-alt').removeClass('fa-sync');
            }
        });
    });
</script>