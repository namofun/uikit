@using Microsoft.AspNetCore.Routing
@using Microsoft.AspNetCore.Mvc.Abstractions
@model IEnumerable<EndpointDataSource>

@functions {
    string GetExtendedName(Type type)
    {
        if (type.GenericTypeArguments.Length == 0)
        {
            return type.Name;
        }
        else
        {
            return type.Name[0..^2] + "<" + string.Join(',', type.GenericTypeArguments.Select(a => GetExtendedName(a))) + ">";
        }
    }

    void Badge(string content, string color, bool condition = true, string? title = null)
    {
        if (condition)
        {
        <span class="badge badge-@color" title="@title">@content</span>
        }
    }
}

@{
    ViewData["Title"] = "Sitemaps";
}

<h2 class="mt-2 mb-3">@ViewData["Title"]</h2>

@foreach (var eds in Model)
{
<h4>@GetExtendedName(eds.GetType())</h4>
<ul>
    @foreach (var ep in eds.Endpoints)
    {
    <li>
        @if (!(ep is RouteEndpoint re))
        {
            Badge("non-route", "dark");
        }
        else
        {
            var ad = re.Metadata.GetMetadata<ActionDescriptor>();
            var area = (ad?.RouteValues.ContainsKey("area") ?? false) ? ad.RouteValues["area"] : null;
            var routeName = re.Metadata.GetMetadata<IRouteNameMetadata>()?.RouteName;
            Badge(area + (!string.IsNullOrEmpty(routeName) || re.Order != 0 ? " *" : ""), "light", area != null, (routeName != null ? "RouteName: " + routeName + "; " : "") + "Order: " + re.Order);
            Badge("non-mvc" + (!string.IsNullOrEmpty(routeName) || re.Order != 0 ? " *" : ""), "dark", ad == null, "Order: " + re.Order);
            if (!(re.Metadata.GetMetadata<ISuppressMatchingMetadata>()?.SuppressMatching ?? false))
            {
                var methods = re.Metadata.GetMetadata<HttpMethodMetadata>()?.HttpMethods ?? Array.Empty<string>();
                Badge("GET", "primary", methods.Contains("GET"));
                Badge("POST", "success", methods.Contains("POST"));
                Badge("PUT", "warning", methods.Contains("PUT"));
                Badge("DELETE", "danger", methods.Contains("DELETE"));
                Badge("PATCH", "info", methods.Contains("PATCH"));
                Badge("OPTIONS", "dark", methods.Contains("OPTIONS"));
                Badge("HEAD", "dark", methods.Contains("HEAD"));
                Badge("TRACE", "dark", methods.Contains("TRACE"));
                Badge("CONNECT", "dark", methods.Contains("CONNECT"));
        <code>/@re.RoutePattern.RawText.TrimStart('/')</code>
            }
            else
            {
                Badge("inert", "secondary");
            }
        }
        @ep.DisplayName
    </li>
    }
</ul>
}
